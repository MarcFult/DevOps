name: CI â€“ Build, Test, Deploy, Integrate, Push

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  build-test-docker:
    runs-on: self-hosted
    permissions:
      contents: read
      packages: write
      id-token: write

    env:
      # We checkout the repo into "repo/" to avoid the stale path that has root-owned files
      REPO_ROOT: repo
      PROJECT_DIR: repo/DevOps/DevOps
      GRADLE_USER_HOME: ${{ github.workspace }}/.gradle

      # ---- App coords ----
      SERVICE_NAME: devops-app
      CONTAINER_NAME: unicorn-fart
      APP_PORT: "8080"
      HEALTH_URL: "http://localhost:8080/endpoint"
      EXPECTED_FILE: "integration/expected.txt"

      TEAM_REGISTRY: 10.0.40.193:5000

      # ---- Docs coords ----
      DOCS_CONTAINER_NAME: devops-docs
      DOCS_HOST_PORT: "8081" # must differ from APP_PORT
      DOCS_HEALTH_URL: "http://localhost:8081/index.html"

    steps:
      # Checkout into REPO_ROOT so checkout doesn't try to delete the old root-owned path
      - uses: actions/checkout@v4
        with:
          path: ${{ env.REPO_ROOT }}
          clean: false
          fetch-depth: 0

      # One-time heal (safe to keep): ensure everything under REPO_ROOT is owned by the runner
      - name: Chown repo to runner user (once)
        run: |
          docker run --rm \
            -v "$PWD/${REPO_ROOT}":/project \
            bash:latest chown --recursive $(id -u):$(id -g) /project

      - name: Show repo layout (debug)
        run: |
          pwd
          ls -la
          echo "REPO_ROOT=${REPO_ROOT}"
          echo "PROJECT_DIR=${PROJECT_DIR}"
          ls -la "${REPO_ROOT}" || true
          ls -la "${PROJECT_DIR}" || true
          ls -la "${REPO_ROOT}/integration" || true
          ls -la "${PROJECT_DIR}/docs" || true
          test -f "${PROJECT_DIR}/mkdocs.yml" && echo "mkdocs.yml present" || echo "mkdocs.yml missing"
          test -f "${PROJECT_DIR}/Dockerfile.docs" && echo "Dockerfile.docs present" || echo "Dockerfile.docs missing"

      # Fail fast if Sonar secrets are missing (keeps values masked)
      - name: Validate Sonar secrets exist
        env:
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          set -e
          : "${SONAR_HOST_URL:?Missing SONAR_HOST_URL}"
          : "${SONAR_PROJECT_KEY:?Missing SONAR_PROJECT_KEY}"
          : "${SONAR_TOKEN:?Missing SONAR_TOKEN}"
          echo "Sonar secrets are present."

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "21"

      - name: Prepare Gradle user home
        run: |
          mkdir -p "$GRADLE_USER_HOME"
          chmod -R u+rwX "$GRADLE_USER_HOME"

      - name: Make wrapper executable (if present)
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          if [ -f gradlew ]; then
            sed -i 's/\r$//' gradlew || true
            chmod +x gradlew
          fi

      - name: Build with tests (fat JAR)
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          if [ -f ./gradlew ]; then
            ./gradlew --no-daemon -g "$GRADLE_USER_HOME" clean test bootJar
          else
            gradle    --no-daemon -g "$GRADLE_USER_HOME" clean test bootJar
          fi

      - name: Upload fat JAR
        uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: ${{ env.PROJECT_DIR }}/build/libs/*.jar
          if-no-files-found: error

      - name: Upload test report
        uses: actions/upload-artifact@v4
        with:
          name: test-report
          path: ${{ env.PROJECT_DIR }}/build/reports/tests/test/**

      # ---------- Coverage + SonarQube ----------
      - name: Generate JaCoCo coverage report
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          if [ -f ./gradlew ]; then
            ./gradlew --no-daemon -g "$GRADLE_USER_HOME" jacocoTestReport
          else
            gradle    --no-daemon -g "$GRADLE_USER_HOME" jacocoTestReport
          fi
          test -f build/reports/jacoco/test/jacocoTestReport.xml

      - name: Upload coverage report (HTML)
        uses: actions/upload-artifact@v4
        with:
          name: coverage-html
          path: ${{ env.PROJECT_DIR }}/build/reports/jacoco/test/html/**

      - name: SonarQube scan (Docker CLI)
        working-directory: ${{ env.PROJECT_DIR }}
        env:
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          set -euxo pipefail
          docker run --rm \
            -e SONAR_HOST_URL="$SONAR_HOST_URL" \
            -e SONAR_TOKEN="$SONAR_TOKEN" \
            -e SONAR_PROJECT_KEY="$SONAR_PROJECT_KEY" \
            -v "$PWD:/usr/src" \
            sonarsource/sonar-scanner-cli:latest

      - name: Define image coords (app + docs)
        run: |
          REPO_LC=$(echo "${GITHUB_REPOSITORY}" | tr '[:upper:]' '[:lower:]')
          echo "REPO_LC=${REPO_LC}" >> $GITHUB_ENV
          echo "IMAGE_GHCR=ghcr.io/${REPO_LC}" >> $GITHUB_ENV
          echo "IMAGE_LOCAL=${REPO_LC}" >> $GITHUB_ENV
          echo "TAG=${GITHUB_SHA}" >> $GITHUB_ENV
          echo "IMAGE_TEAM=${TEAM_REGISTRY}/${REPO_LC}" >> $GITHUB_ENV
          echo "IMAGE_GHCR_DOCS=ghcr.io/${REPO_LC}-docs" >> $GITHUB_ENV
          echo "IMAGE_LOCAL_DOCS=${REPO_LC}-docs" >> $GITHUB_ENV
          echo "IMAGE_TEAM_DOCS=${TEAM_REGISTRY}/${REPO_LC}-docs" >> $GITHUB_ENV

      - name: Login GHCR (optional)
        if: ${{ github.event_name != 'pull_request' }}
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # ---------- Build & tag APP image ----------
      - name: Build Docker image (app)
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          docker build -t "$IMAGE_LOCAL:$TAG" -t "$IMAGE_LOCAL:latest" .
          docker tag "$IMAGE_LOCAL:$TAG" "$IMAGE_GHCR:$TAG"
          docker tag "$IMAGE_LOCAL:latest" "$IMAGE_GHCR:latest"

      # ---------- Deploy APP on team VM ----------
      - name: Stop old container & cleanup (app)
        run: |
          set -euxo pipefail
          docker rm -f "$CONTAINER_NAME" || true
          docker image prune -f || true

      - name: Free host port ${{ env.APP_PORT }} (app)
        run: |
          set -euxo pipefail
          IN_USE=$(docker ps -q --filter "publish=${APP_PORT}")
          if [ -n "$IN_USE" ]; then
            echo "Killing containers using host port ${APP_PORT}: $IN_USE"
            docker rm -f $IN_USE || true
          fi

      - name: Prepare test fixtures (expected.txt)
        working-directory: ${{ env.REPO_ROOT }}
        run: |
          mkdir -p integration
          [ -f "$EXPECTED_FILE" ] || echo "OK" > "$EXPECTED_FILE"

      - name: Start container (app)
        run: |
          set -euxo pipefail
          docker run -d \
            --name "$CONTAINER_NAME" \
            --restart unless-stopped \
            -p "${APP_PORT}:8080" \
            "$IMAGE_LOCAL:$TAG"

      - name: Wait for app to become ready
        timeout-minutes: 3
        run: |
          set -e
          echo "Waiting for ${HEALTH_URL} ..."
          for i in $(seq 1 60); do
            if curl -fsS "$HEALTH_URL" >/dev/null 2>&1; then
              echo "Service is up."
              exit 0
            fi
            sleep 3
          done
          echo "Service did not become ready in time."
          exit 1

      # ---------- Simple integration test ----------
      - name: Integration test (compare endpoint to expected)
        working-directory: ${{ env.REPO_ROOT }}
        run: |
          set -e
          test -f "$EXPECTED_FILE" || { echo "Missing $EXPECTED_FILE"; exit 1; }
          EXPECTED="$(cat "$EXPECTED_FILE")"
          ACTUAL="$(curl -fsS "$HEALTH_URL")"
          if [ "$EXPECTED" = "$ACTUAL" ]; then
            echo "Integration test PASSED"
          else
            echo "Integration test FAILED"
            echo "----- EXPECTED -----"
            printf "%s\n" "$EXPECTED"
            echo "----- ACTUAL -------"
            printf "%s\n" "$ACTUAL"
            exit 1
          fi

      # ---------- Build DOCS (MkDocs -> site) ----------
      - name: Clean site directory
        working-directory: ${{ env.PROJECT_DIR }}
        run: rm -rf site

      - name: Build docs (MkDocs Material via Docker)
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          set -euxo pipefail
          test -f mkdocs.yml
          test -d docs
          docker run --rm \
            --user "$(id -u):$(id -g)" \
            -v "$PWD":/docs \
            --entrypoint /bin/sh \
            squidfunk/mkdocs-material:latest \
            -c "chown -R $(id -u):$(id -g) /docs && mkdocs build --site-dir site"
          test -f site/index.html

      # ---------- Build & run DOCS container (nginx) ----------
      - name: Build docs container (nginx)
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          docker build -f Dockerfile.docs -t "$IMAGE_LOCAL_DOCS:$TAG" -t "$IMAGE_LOCAL_DOCS:latest" .
          docker tag "$IMAGE_LOCAL_DOCS:$TAG" "$IMAGE_GHCR_DOCS:$TAG"
          docker tag "$IMAGE_LOCAL_DOCS:latest" "$IMAGE_GHCR_DOCS:latest"

      # NEW: verify that index.html is actually inside the image
      - name: Verify docs baked into image
        run: |
          set -eux
          docker run -d --rm -p "${DOCS_HOST_PORT}:80" "$IMAGE_LOCAL_DOCS:$TAG"

      - name: Stop old container & free port ${{ env.DOCS_HOST_PORT }} (docs)
        run: |
          set -euxo pipefail
          docker rm -f "$DOCS_CONTAINER_NAME" || true
          IN_USE=$(docker ps -q --filter "publish=${DOCS_HOST_PORT}")
          if [ -n "$IN_USE" ]; then
            echo "Killing containers using host port ${DOCS_HOST_PORT}: $IN_USE"
            docker rm -f $IN_USE || true
          fi

      - name: Start docs container
        run: |
          set -euxo pipefail
          docker run -d \
            --name "$DOCS_CONTAINER_NAME" \
            --restart unless-stopped \
            -p "${DOCS_HOST_PORT}:80" \
            "$IMAGE_LOCAL_DOCS:$TAG"

      - name: Smoke test docs
        run: |
          set -e
          echo "Waiting for ${DOCS_HEALTH_URL} ..."
          for i in $(seq 1 30); do
            code=$(curl -s -o /dev/null -w "%{http_code}" "$DOCS_HEALTH_URL" || true)
            if [ "$code" = "200" ]; then
              echo "Docs are up."
              exit 0
            fi
            sleep 2
          done
          echo "Docs did not become ready in time."
          exit 1

      # Extra debug if anything fails after this point
      - name: Debug docs container on failure
        if: ${{ failure() }}
        run: |
          echo "=== Files inside running docs container ==="
          docker exec "$DOCS_CONTAINER_NAME" sh -c 'ls -la /usr/share/nginx/html || true'
          echo "=== Nginx error log (if present) ==="
          docker exec "$DOCS_CONTAINER_NAME" sh -c 'cat /var/log/nginx/error.log || true'

      - name: Check MkDocs site content
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          echo "Files in site/:"
          ls -la site/
    
      # ---------- Tag & Push APP after tests passed ----------
      - name: Tag for team registry (app)
        if: ${{ github.event_name != 'pull_request' }}
        run: |
          set -euxo pipefail
          docker tag "$IMAGE_LOCAL:$TAG"   "$IMAGE_TEAM:$TAG"
          docker tag "$IMAGE_LOCAL:latest" "$IMAGE_TEAM:latest"

      - name: Push to team registry (app)
        if: ${{ github.event_name != 'pull_request' }}
        run: |
          set -euxo pipefail
          docker push "$IMAGE_TEAM:$TAG"
          docker push "$IMAGE_TEAM:latest"

      - name: Also push to GHCR (app)
        if: ${{ github.event_name != 'pull_request' }}
        run: |
          set -euxo pipefail
          docker push "$IMAGE_GHCR:$TAG"
          docker push "$IMAGE_GHCR:latest"

      # ---------- Tag & Push DOCS ----------
      - name: Tag for team registry (docs)
        if: ${{ github.event_name != 'pull_request' }}
        run: |
          set -euxo pipefail
          docker tag "$IMAGE_LOCAL_DOCS:$TAG"   "$IMAGE_TEAM_DOCS:$TAG"
          docker tag "$IMAGE_LOCAL_DOCS:latest" "$IMAGE_TEAM_DOCS:latest"

      - name: Push to team registry (docs)
        if: ${{ github.event_name != 'pull_request' }}
        run: |
          set -euxo pipefail
          docker push "$IMAGE_TEAM_DOCS:$TAG"
          docker push "$IMAGE_TEAM_DOCS:latest"

      - name: Also push to GHCR (docs)
        if: ${{ github.event_name != 'pull_request' }}
        run: |
          set -euxo pipefail
          docker push "$IMAGE_GHCR_DOCS:$TAG"
          docker push "$IMAGE_GHCR_DOCS:latest"

      # ---------- Registry availability checks ----------
      - name: Verify repository appears in registry catalog
        if: ${{ github.event_name != 'pull_request' }}
        run: |
          set -euxo pipefail
          CATALOG="$(curl -fsS "http://${TEAM_REGISTRY}/v2/_catalog")"
          echo "$CATALOG"
          echo "$CATALOG" | grep -q "\"${REPO_LC}\"" \
            || { echo "Repo ${REPO_LC} not found in registry catalog"; exit 1; }
          echo "$CATALOG" | grep -q "\"${REPO_LC}-docs\"" \
            || { echo "Repo ${REPO_LC}-docs not found in registry catalog"; exit 1; }

      - name: Verify pushed tags exist in registry (app + docs)
        if: ${{ github.event_name != 'pull_request' }}
        run: |
          set -euxo pipefail
          TAGS_APP="$(curl -fsS "http://${TEAM_REGISTRY}/v2/${REPO_LC}/tags/list")"
          echo "$TAGS_APP"
          echo "$TAGS_APP" | grep -q "\"${TAG}\"" \
            || { echo "Tag ${TAG} not found for app"; exit 1; }
          echo "$TAGS_APP" | grep -q "\"latest\"" \
            || { echo "Tag latest not found for app"; exit 1; }

          TAGS_DOCS="$(curl -fsS "http://${TEAM_REGISTRY}/v2/${REPO_LC}-docs/tags/list")"
          echo "$TAGS_DOCS"
          echo "$TAGS_DOCS" | grep -q "\"${TAG}\"" \
            || { echo "Tag ${TAG} not found for docs"; exit 1; }
          echo "$TAGS_DOCS" | grep -q "\"latest\"" \
            || { echo "Tag latest not found for docs"; exit 1; }

      # ---------- Helpful diagnostics & cleanup ----------
      - name: Dump app container logs on failure
        if: ${{ failure() }}
        run: |
          echo "==== Container logs (${CONTAINER_NAME}) ===="
          docker logs "$CONTAINER_NAME" || true
          echo "==== Container logs (${DOCS_CONTAINER_NAME}) ===="
          docker logs "$DOCS_CONTAINER_NAME" || true

      - name: Stop containers (always)
        if: ${{ always() }}
        run: |
          docker stop "$CONTAINER_NAME" || true
          docker stop "$DOCS_CONTAINER_NAME" || true
