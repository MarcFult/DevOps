name: CI – Build, Test, Docker

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  build-test-docker:
    runs-on: self-hosted
    permissions:
      contents: read
      packages: write
      id-token: write

    # ✅ Put Gradle’s user home in the workspace (always writable)
    env:
      PROJECT_DIR: DevOps/DevOps # <-- adjust if different, or keep your detect step
      GRADLE_USER_HOME: ${{ github.workspace }}/.gradle

    steps:
      - uses: actions/checkout@v4

      - name: Show repo layout (debug)
        run: |
          pwd
          ls -la
          echo "PROJECT_DIR=${PROJECT_DIR}"
          ls -la "${PROJECT_DIR}"

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "21"
          cache: gradle

      # (Optional) make sure the folder exists and is writable
      - name: Prepare Gradle user home
        run: |
          mkdir -p "$GRADLE_USER_HOME"
          chmod -R u+rwX "$GRADLE_USER_HOME"

      - name: Make wrapper executable (if present)
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          if [ -f gradlew ]; then
            sed -i 's/\r$//' gradlew || true
            chmod +x gradlew
          fi

      - name: Build with tests (fat JAR)
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          if [ -f ./gradlew ]; then
            ./gradlew --no-daemon -g "$GRADLE_USER_HOME" clean test bootJar
          else
            gradle    --no-daemon -g "$GRADLE_USER_HOME" clean test bootJar
          fi

      - name: Upload fat JAR
        uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: ${{ env.PROJECT_DIR }}/build/libs/*.jar
          if-no-files-found: error

      - name: Upload test report
        uses: actions/upload-artifact@v4
        with:
          name: test-report
          path: ${{ env.PROJECT_DIR }}/build/reports/tests/test/**

      - name: Define image coords
        run: |
          REPO_LC=$(echo "${GITHUB_REPOSITORY}" | tr '[:upper:]' '[:lower:]')
          echo "IMAGE=ghcr.io/${REPO_LC}" >> $GITHUB_ENV
          echo "TAG=${GITHUB_SHA}" >> $GITHUB_ENV

      - name: Login GHCR
        if: ${{ github.event_name != 'pull_request' }}
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Docker image (from project dir)
        working-directory: ${{ env.PROJECT_DIR }}
        run: docker build -t "$IMAGE:$TAG" -t "$IMAGE:latest" .

      - name: Push Docker image
        if: ${{ github.event_name != 'pull_request' }}
        run: |
          docker push "$IMAGE:$TAG"
          docker push "$IMAGE:latest"
